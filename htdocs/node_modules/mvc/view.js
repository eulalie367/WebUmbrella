var mustache = require("mustache"),
	handlebars = require("handlebars"),
   url = require("url"),
	libpath = require("path"),
   ext = require("./ext")
   async = require("async");

exports.templateExtension = ".mu";
exports.defaultTemplate = "shared/initilizr";
exports.templates = [];

var path = "./Views/";

exports.render = function(templates, model, callback)
{	
	//handle null models
	if(typeof(model) == "undefined" || model == null)
	{
		model = { };
	}
	
	var _templates = [];

	//this is a scenario where io blocking is needed.  We can't render the parent template until the child has been rendered
	async.forEachSeries(exports.templates, 
	function(fileName, cb) 
	{ 
		fileName = path + fileName + exports.templateExtension;
		ext.getFile(fileName, function (file, err)
		{
			if(err == null)
			{
				_templates.push(file);
				cb(err);
			}
			else
			{
				callback("Can't find file " + fileName, true);
			}
		});
	},
		function(err, files)
		{
			if(err == null)
			{
				var html = "";
				for(var i = _templates.length - 1; i >= 0; i--)
				{
					var file = _templates[i];
					switch(exports.templateExtension)
					{
						case ".mu"://mustache
							model.HTML = html;
							try//hate to do this, but it doesn't send back error results from the render method
							{
								html = mustache.render(file, model);
							}
							catch(e)
							{
								callback(e, true);
							}
						break;
						case ".hbs"://handlebars
							var template = handlebars.compile(file);
							model.HTML = html;
							html = template(model);
						break;
					}
				}
				callback(html, false);
			}
			else
			{
				callback(err, true);
			}
			exports.templates = [exports.defaultTemplate]//remove the current template structure since we are using the global variable
		}
	);	
}


