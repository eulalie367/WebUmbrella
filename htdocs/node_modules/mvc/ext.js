var libpath = require("path"),
   fs = require("fs");


//handy extension methods
exports.isNullOrEmpty = function (str)
{
	return typeof(str) == "undefined" ? true : str == null ? true : typeof(str) != "string" ? false : str.replace(/\s/, "").length < 1 ? true : false;
}

var _files = [];
exports.getFile = function (fileName, callback)//this allows us to save a global variable and avoid a ton of io checks
{
	var retVal = _files[fileName];
	if(retVal == null || typeof(retVal) == "undefined")
	{
		libpath.exists(fileName, function (exists)
		{
			if(exists)
			{
				fs.readFile(fileName, "binary", function (err, file)
				{
					_files[fileName] = file;
					callback(file);
				});
			}
			else
			{
				callback(null);
			}
		});
	}
	else
	{
		callback(retVal);
	}
	return retVal;
}

String.prototype.toTitleCase = function () {
  var smallWords = /^(a|an|and|are|as|at|but|by|en|for|if|in|of|on|or|the|to|vs?\.?|via)$/i;

  return this.replace(/([^\W_]+[^\s-]*) */g, function (match, p1, index, title) {
    if (index > 0 && index + p1.length !== title.length &&
      p1.search(smallWords) > -1 && title.charAt(index - 2) !== ":" && 
      title.charAt(index - 1).search(/[^\s-]/) < 0) {
      return match.toLowerCase();
    }

    if (p1.substr(1).search(/[A-Z]|\../) > -1) {
      return match;
    }

    return match.charAt(0).toUpperCase() + match.substr(1);
  });
};

