var libpath = require("path"),
   http = require("http"),
   fs = require("fs"),
   url = require("url"),
   ext = require("./ext"),
   requireindex = require('requireindex'),
   view = require("./view.js"),
   controllers = requireindex("./Controllers"),
   logger = require('winston'),
   send = require('send');
  // var load = require('express-load');

	//load('Controllers').into(controllers);

	logger.add(logger.transports.File, { filename: 'server.log' });


exports.port = 80;
exports.debug = false;
exports.excludes = "node_modules|Controllers|Models|Views";
exports.defaultPath = "./";
exports.custom404 = "404.html";

var path = ".";

function startServer()
{
	var server = http.createServer(function (request, response)
	{		
		var uri = url.parse(request.url).pathname;
		uri = uri.indexOf("/") == 0 ? uri.substr(1) : uri;

		var fileName = libpath.join(path, uri);
		
		if(uri == "")
		{
			uri = exports.defaultPath;
		}
		
		send(request, uri)
			.on('error', function(err){ return404(response, request); })
			.on('rest', 
				function()
				{
					serveMVC(uri, request, response);
				})
			.maxage(3600000)
			.pipe(response);	
	}).listen(exports.port);

	//TODO:We should make a routes file and add it here
	server.addListener('request', function (request, response) {
		var uri = request.headers.host.replace("www.", "") + request.url;
		//this ends in a request loop.  Not for sure how to make it work
//		console.log(uri + " " + (request.headers.host.indexOf("www.") > -1));
//		if(uri.indexOf("www.") > -1)//no www.
//		{
//			response.writeHeader(301, {"Location": uri.replace("www.", "")});
//			response.end();a
//		}
		if(uri != uri.toLowerCase())//all lowercase
		{
			response.writeHeader(301, {"Location": request.url.toLowerCase() });
			response.end();
		}
		if(exports.defaultPath != "/" && request.url == "/" + exports.defaultPath && exports.defaultPath)//defaultPath should only go to /
		{
			response.writeHeader(301, {"Location": "/"});
			response.end();
		}
	});

}

function serveMVC(fileName, request, response)
{
	fileName = fileName.toLowerCase();
	var methodTree = fileName.split("/");

	if(methodTree.length > 0)//does module exits?
	{
		var method = controllers;
		for(i=0;i < methodTree.length;i++)//move through the tree
		{
			if(typeof(method[methodTree[i]]) != "undefined")
			{
				method = method[methodTree[i]];
			}
			else
			{
				return404(response, request);
			}
		}

		if(typeof(method) == "function")
		{
			view.templates.push(fileName.indexOf("/") > 0 ? fileName : fileName + "/index");//the default, the base class should use the index view, all functions will use a view with their name
			method(request, response, view.templates, render);
		}
		else
		{
			return404(response, request);
		}
	}
	else
	{
		return404(response, request);
	}
}

function render(model, response, templates, templateExtension)
{
	if(typeof(templateExtension) != "undefined")
	{
		view.templateExtension = templateExtension;
	}

	view.render(templates, model, function(text, err)
	{
		if(err && ext.isNullOrEmpty(text))
		{
			return404(response, request);
		}
		else if(err)
		{
			return500(text, response);
		}
		else
		{
			return200(text, response);
		}
	});
}

function return404(response, request)
{
	response.statusCode = 404;
	send(request, url.parse(exports.custom404).pathname)
	.pipe(response);
	return;
}

function return500(text, response)
{
	response.writeHead(500,
	{
		"Content-Type": "text/plain"
	});
	response.write(text + "\n");
	response.end();
	return;
}

function return200(text, response)
{
	response.writeHead(200,
	{
		"Content-Type": "text/html"
	});
	response.write(text);
	response.end();
	return;
}

exports.start = startServer;
